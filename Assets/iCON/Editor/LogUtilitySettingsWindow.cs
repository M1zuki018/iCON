using UnityEngine;
using UnityEditor;
using System.IO;
using System;
using System.Collections.Generic;
using System.Reflection;

namespace iCON.Utility.Editor
{
    /// <summary>
    /// LogUtility„ÅÆË®≠ÂÆö„ÇíÁÆ°ÁêÜ„Åô„Çã„Ç®„Éá„Ç£„Çø„ÉºÊã°Âºµ„Ç¶„Ç£„É≥„Éâ„Ç¶
    /// </summary>
    public class LogUtilitySettingsWindow : EditorWindow
    {
        #region Private Fields
        private Vector2 _scrollPosition;
        private bool _showAdvancedSettings = false;
        private bool _showCategorySettings = true;
        private bool _showFileSettings = false;
        private bool _showTestSection = false;
        private bool _showColorSettings = false;
        
        // „ÉÜ„Çπ„ÉàÁî®„ÅÆ‰∏ÄÊôÇÁöÑ„Å™ÂÄ§
        private string _testMessage = "Test log message";
        private LogLevel _testLogLevel = LogLevel.Info;
        private LogCategory _testCategory = LogCategory.Debug;
        
        // „Ç´„É©„ÉºË®≠ÂÆöÁî®
        private ColorTheme _selectedTheme = ColorTheme.Default;
        
        // UIË®≠ÂÆö
        private const float LABEL_WIDTH = 180f;
        private const float BUTTON_HEIGHT = 25f;
        private const float SECTION_SPACING = 10f;
        private const float COLOR_FIELD_WIDTH = 60f;
        #endregion

        #region Unity Menu Integration
        [MenuItem("Tools/iCON/Log Utility Settings")]
        public static void ShowWindow()
        {
            var window = GetWindow<LogUtilitySettingsWindow>("Log Settings");
            window.minSize = new Vector2(400f, 500f);
            window.Show();
        }
        #endregion

        #region Unity Lifecycle
        private void OnEnable()
        {
            // „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅåÈñã„Åã„Çå„ÅüÊôÇ„ÅÆÂàùÊúüÂåñ
            titleContent = new GUIContent("Log Settings", EditorGUIUtility.IconContent("console.infoicon").image);
        }

        private void OnGUI()
        {
            EditorGUILayout.Space(5f);
            
            // „Éò„ÉÉ„ÉÄ„Éº
            DrawHeader();
            
            // „Çπ„ÇØ„É≠„Éº„É´ÈñãÂßã
            _scrollPosition = EditorGUILayout.BeginScrollView(_scrollPosition);
            
            // Âü∫Êú¨Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
            DrawBasicSettings();
            
            // „Ç´„ÉÜ„Ç¥„É™Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
            DrawCategorySettings();
            
            // Ëâ≤Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
            DrawColorSettings();
            
            // „Éï„Ç°„Ç§„É´Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
            DrawFileSettings();
            
            // È´òÂ∫¶„Å™Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
            DrawAdvancedSettings();
            
            // „ÉÜ„Çπ„Éà„Çª„ÇØ„Ç∑„Éß„É≥
            DrawTestSection();
            
            // „Éó„É™„Çª„ÉÉ„ÉàË®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
            DrawPresetSettings();
            
            EditorGUILayout.EndScrollView();
            
            // „Éï„ÉÉ„Çø„Éº
            DrawFooter();
        }
        #endregion

        #region UI Drawing Methods
        private void DrawHeader()
        {
            GUILayout.BeginVertical(EditorStyles.helpBox);
            
            // „Çø„Ç§„Éà„É´
            GUIStyle titleStyle = new GUIStyle(EditorStyles.boldLabel)
            {
                fontSize = 16,
                alignment = TextAnchor.MiddleCenter
            };
            EditorGUILayout.LabelField("üõ†Ô∏è LogUtility Settings", titleStyle);
            
            EditorGUILayout.Space(3f);
            
            // ÁèæÂú®„ÅÆÁä∂ÊÖãË°®Á§∫
            GUIStyle statusStyle = new GUIStyle(EditorStyles.miniLabel)
            {
                alignment = TextAnchor.MiddleCenter,
                normal = { textColor = Application.isPlaying ? Color.green : Color.gray }
            };
            string status = Application.isPlaying ? "‚óè Runtime Active" : "‚óã Editor Only";
            EditorGUILayout.LabelField(status, statusStyle);
            
            GUILayout.EndVertical();
            EditorGUILayout.Space(SECTION_SPACING);
        }

        private void DrawBasicSettings()
        {
            DrawSectionHeader("üîß Basic Settings", ref _showAdvancedSettings);
            
            if (_showAdvancedSettings)
            {
                GUILayout.BeginVertical(EditorStyles.helpBox);
                
                // ÊúÄÂ∞è„É≠„Ç∞„É¨„Éô„É´
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("Minimum Log Level", GUILayout.Width(LABEL_WIDTH));
                LogUtility.MinLogLevel = (LogLevel)EditorGUILayout.EnumPopup(LogUtility.MinLogLevel);
                EditorGUILayout.EndHorizontal();
                
                EditorGUILayout.Space(3f);
                
                // „Çø„Ç§„É†„Çπ„Çø„É≥„Éó
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("Enable Timestamp", GUILayout.Width(LABEL_WIDTH));
                LogUtility.IsTimestampEnabled = EditorGUILayout.Toggle(LogUtility.IsTimestampEnabled);
                EditorGUILayout.EndHorizontal();
                
                // „Çπ„Çø„ÉÉ„ÇØ„Éà„É¨„Éº„Çπ
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("Enable Stack Trace", GUILayout.Width(LABEL_WIDTH));
                LogUtility.IsStackTraceEnabled = EditorGUILayout.Toggle(LogUtility.IsStackTraceEnabled);
                EditorGUILayout.EndHorizontal();
                
                // „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„É≠„Ç∞
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("Performance Logging", GUILayout.Width(LABEL_WIDTH));
                LogUtility.IsPerformanceLoggingEnabled = EditorGUILayout.Toggle(LogUtility.IsPerformanceLoggingEnabled);
                EditorGUILayout.EndHorizontal();
                
                GUILayout.EndVertical();
            }
            
            EditorGUILayout.Space(SECTION_SPACING);
        }

        private void DrawCategorySettings()
        {
            DrawSectionHeader("üìÇ Category Settings", ref _showCategorySettings);
            
            if (_showCategorySettings)
            {
                GUILayout.BeginVertical(EditorStyles.helpBox);
                
                // ÂÖ®„Ç´„ÉÜ„Ç¥„É™‰∏ÄÊã¨Ë®≠ÂÆö
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("Enable All", GUILayout.Height(BUTTON_HEIGHT)))
                {
                    LogUtility.SetAllCategoriesEnabled(true);
                }
                if (GUILayout.Button("Disable All", GUILayout.Height(BUTTON_HEIGHT)))
                {
                    LogUtility.SetAllCategoriesEnabled(false);
                }
                EditorGUILayout.EndHorizontal();
                
                EditorGUILayout.Space(5f);
                
                // ÂêÑ„Ç´„ÉÜ„Ç¥„É™„ÅÆË®≠ÂÆö
                var categories = Enum.GetValues(typeof(LogCategory));
                foreach (LogCategory category in categories)
                {
                    EditorGUILayout.BeginHorizontal();
                    
                    // „Ç´„ÉÜ„Ç¥„É™„Ç¢„Ç§„Ç≥„É≥
                    string icon = GetCategoryIcon(category);
                    EditorGUILayout.LabelField($"{icon} {category}", GUILayout.Width(LABEL_WIDTH));
                    
                    // ÁèæÂú®„ÅÆÁä∂ÊÖã„ÇíÂèñÂæóÔºà„É™„Éï„É¨„ÇØ„Ç∑„Éß„É≥„Çí‰ΩøÁî®Ôºâ
                    bool currentState = GetCategoryEnabled(category);
                    bool newState = EditorGUILayout.Toggle(currentState);
                    
                    if (newState != currentState)
                    {
                        LogUtility.SetCategoryEnabled(category, newState);
                    }
                    
                    EditorGUILayout.EndHorizontal();
                }
                
                GUILayout.EndVertical();
            }
            
            EditorGUILayout.Space(SECTION_SPACING);
        }
        
        private void DrawColorSettings()
        {
            DrawSectionHeader("üé® Color Settings", ref _showColorSettings);
            
            if (_showColorSettings)
            {
                GUILayout.BeginVertical(EditorStyles.helpBox);
                
                // „Ç´„É©„Éº„ÉÜ„Éº„ÉûÈÅ∏Êäû
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("Color Theme:", GUILayout.Width(LABEL_WIDTH));
                ColorTheme newTheme = (ColorTheme)EditorGUILayout.EnumPopup(_selectedTheme);
                if (newTheme != _selectedTheme)
                {
                    _selectedTheme = newTheme;
                    LogColorSettings.ApplyColorTheme(_selectedTheme);
                    ShowNotification(new GUIContent($"Applied {_selectedTheme} theme!"));
                }
                EditorGUILayout.EndHorizontal();
                
                EditorGUILayout.Space(5f);
                
                // „É™„Çª„ÉÉ„Éà„Éú„Çø„É≥
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("üîÑ Reset to Defaults", GUILayout.Height(BUTTON_HEIGHT)))
                {
                    LogColorSettings.ResetToDefaults();
                    _selectedTheme = ColorTheme.Default;
                    ShowNotification(new GUIContent("Colors reset to defaults!"));
                }
                if (GUILayout.Button("üé® Apply Custom Colors", GUILayout.Height(BUTTON_HEIGHT)))
                {
                    ShowNotification(new GUIContent("Custom colors applied!"));
                }
                EditorGUILayout.EndHorizontal();
                
                EditorGUILayout.Space(8f);
                
                // „É≠„Ç∞„É¨„Éô„É´Ëâ≤Ë®≠ÂÆö
                EditorGUILayout.LabelField("üìä Log Level Colors:", EditorStyles.boldLabel);
                
                foreach (LogLevel level in Enum.GetValues(typeof(LogLevel)))
                {
                    EditorGUILayout.BeginHorizontal();
                    
                    // „É≠„Ç∞„É¨„Éô„É´Âêç
                    string levelIcon = LogColorSettings.LogLevelIcon(level);
                    EditorGUILayout.LabelField($"{levelIcon} {level}", GUILayout.Width(LABEL_WIDTH));
                    
                    // ÁèæÂú®„ÅÆËâ≤Ë°®Á§∫
                    Color currentColor = LogColorSettings.LevelColors[level];
                    Color newColor = EditorGUILayout.ColorField(GUIContent.none, currentColor, 
                        false, false, false, GUILayout.Width(COLOR_FIELD_WIDTH));
                    
                    if (newColor != currentColor)
                    {
                        LogColorSettings.SetLevelColor(level, newColor);
                    }
                    
                    // „Éó„É¨„Éì„É•„Éº
                    GUIStyle previewStyle = new GUIStyle(EditorStyles.label);
                    previewStyle.normal.textColor = currentColor;
                    previewStyle.fontStyle = FontStyle.Bold;
                    EditorGUILayout.LabelField($"Sample {level} text", previewStyle, GUILayout.ExpandWidth(true));
                    
                    EditorGUILayout.EndHorizontal();
                }
                
                EditorGUILayout.Space(8f);
                
                // „É≠„Ç∞„Ç´„ÉÜ„Ç¥„É™Ëâ≤Ë®≠ÂÆö
                EditorGUILayout.LabelField("üìÇ Log Category Colors:", EditorStyles.boldLabel);
                
                foreach (LogCategory category in Enum.GetValues(typeof(LogCategory)))
                {
                    EditorGUILayout.BeginHorizontal();
                    
                    // „Ç´„ÉÜ„Ç¥„É™Âêç
                    string categoryIcon = GetCategoryIcon(category);
                    EditorGUILayout.LabelField($"{categoryIcon} {category}", GUILayout.Width(LABEL_WIDTH));
                    
                    // ÁèæÂú®„ÅÆËâ≤Ë°®Á§∫
                    Color currentColor = LogColorSettings.CategoryColors[category];
                    Color newColor = EditorGUILayout.ColorField(GUIContent.none, currentColor, 
                        false, false, false, GUILayout.Width(COLOR_FIELD_WIDTH));
                    
                    if (newColor != currentColor)
                    {
                        LogColorSettings.SetCategoryColor(category, newColor);
                    }
                    
                    // „Éó„É¨„Éì„É•„Éº
                    GUIStyle previewStyle = new GUIStyle(EditorStyles.label);
                    previewStyle.normal.textColor = currentColor;
                    previewStyle.fontStyle = FontStyle.Bold;
                    EditorGUILayout.LabelField($"Sample {category} text", previewStyle, GUILayout.ExpandWidth(true));
                    
                    EditorGUILayout.EndHorizontal();
                }
                
                EditorGUILayout.Space(5f);
                
                // „Ç´„É©„Éº„Éó„É¨„Éì„É•„Éº„Çª„ÇØ„Ç∑„Éß„É≥
                EditorGUILayout.LabelField("üé≠ Color Preview:", EditorStyles.boldLabel);
                GUILayout.BeginVertical(EditorStyles.textArea);
                
                // ÂêÑ„É¨„Éô„É´„Åß„ÅÆ„Éó„É¨„Éì„É•„ÉºË°®Á§∫
                foreach (LogLevel level in Enum.GetValues(typeof(LogLevel)))
                {
                    GUIStyle previewStyle = new GUIStyle(EditorStyles.label);
                    previewStyle.normal.textColor = LogColorSettings.LevelColors[level];
                    previewStyle.fontStyle = FontStyle.Bold;
                    
                    string previewText = $"[{DateTime.Now:HH:mm:ss}] [{level.ToString().ToUpper()}][{_testCategory.ToString().ToUpper()}] Sample {level} log message";
                    EditorGUILayout.LabelField(previewText, previewStyle);
                }
                
                GUILayout.EndVertical();
                
                GUILayout.EndVertical();
            }
            
            EditorGUILayout.Space(SECTION_SPACING);
        }


        private void DrawFileSettings()
        {
            DrawSectionHeader("üíæ File Logging Settings", ref _showFileSettings);
            
            if (_showFileSettings)
            {
                GUILayout.BeginVertical(EditorStyles.helpBox);
                
                // „Éï„Ç°„Ç§„É´„É≠„Ç∞ÊúâÂäπ/ÁÑ°Âäπ
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("Enable File Logging", GUILayout.Width(LABEL_WIDTH));
                LogUtility.IsFileLoggingEnabled = EditorGUILayout.Toggle(LogUtility.IsFileLoggingEnabled);
                EditorGUILayout.EndHorizontal();
                
                EditorGUILayout.Space(5f);
                
                // „Éï„Ç°„Ç§„É´„Éë„ÇπË°®Á§∫
                string logPath = Path.Combine(Application.persistentDataPath, "Logs");
                EditorGUILayout.LabelField("Log Directory:", EditorStyles.boldLabel);
                EditorGUILayout.SelectableLabel(logPath, EditorStyles.textField, GUILayout.Height(18f));
                
                EditorGUILayout.Space(3f);
                
                // „Éï„Ç°„Ç§„É´Êìç‰Ωú„Éú„Çø„É≥
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("Open Log Folder", GUILayout.Height(BUTTON_HEIGHT)))
                {
                    OpenLogFolder();
                }
                if (GUILayout.Button("Clear Log File", GUILayout.Height(BUTTON_HEIGHT)))
                {
                    if (EditorUtility.DisplayDialog("Clear Log File", "Are you sure you want to clear the current log file?", "Clear", "Cancel"))
                    {
                        LogUtility.ClearLogFile();
                        ShowNotification(new GUIContent("Log file cleared!"));
                    }
                }
                EditorGUILayout.EndHorizontal();
                
                GUILayout.EndVertical();
            }
            
            EditorGUILayout.Space(SECTION_SPACING);
        }

        private void DrawAdvancedSettings()
        {
            // È´òÂ∫¶„Å™Ë®≠ÂÆö„ÅØÂü∫Êú¨Ë®≠ÂÆö„Å´Áµ±ÂêàÊ∏à„Åø
        }

        private void DrawTestSection()
        {
            DrawSectionHeader("üß™ Test Log Output", ref _showTestSection);
            
            if (_showTestSection)
            {
                GUILayout.BeginVertical(EditorStyles.helpBox);
                
                // „ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏
                EditorGUILayout.LabelField("Test Message:", EditorStyles.boldLabel);
                _testMessage = EditorGUILayout.TextField(_testMessage);
                
                EditorGUILayout.Space(3f);
                
                // „É≠„Ç∞„É¨„Éô„É´ÈÅ∏Êäû
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("Log Level:", GUILayout.Width(80f));
                _testLogLevel = (LogLevel)EditorGUILayout.EnumPopup(_testLogLevel);
                EditorGUILayout.EndHorizontal();
                
                // „Ç´„ÉÜ„Ç¥„É™ÈÅ∏Êäû
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("Category:", GUILayout.Width(80f));
                _testCategory = (LogCategory)EditorGUILayout.EnumPopup(_testCategory);
                EditorGUILayout.EndHorizontal();
                
                EditorGUILayout.Space(5f);
                
                // „ÉÜ„Çπ„ÉàÂÆüË°å„Éú„Çø„É≥
                if (GUILayout.Button("üöÄ Send Test Log", GUILayout.Height(BUTTON_HEIGHT * 1.2f)))
                {
                    SendTestLog();
                }
                
                EditorGUILayout.Space(3f);
                
                // ÂêÑ„É¨„Éô„É´„ÅÆ„ÇØ„Ç§„ÉÉ„ÇØ„ÉÜ„Çπ„Éà
                EditorGUILayout.LabelField("Quick Tests:", EditorStyles.boldLabel);
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("Verbose", GUILayout.Height(BUTTON_HEIGHT)))
                    LogUtility.Verbose("Test verbose message", _testCategory);
                if (GUILayout.Button("Debug", GUILayout.Height(BUTTON_HEIGHT)))
                    LogUtility.Debug("Test debug message", _testCategory);
                if (GUILayout.Button("Info", GUILayout.Height(BUTTON_HEIGHT)))
                    LogUtility.Info("Test info message", _testCategory);
                EditorGUILayout.EndHorizontal();
                
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("Warning", GUILayout.Height(BUTTON_HEIGHT)))
                    LogUtility.Warning("Test warning message", _testCategory);
                if (GUILayout.Button("Error", GUILayout.Height(BUTTON_HEIGHT)))
                    LogUtility.Error("Test error message", _testCategory);
                if (GUILayout.Button("Fatal", GUILayout.Height(BUTTON_HEIGHT)))
                    LogUtility.Fatal("Test fatal message", _testCategory);
                EditorGUILayout.EndHorizontal();
                
                GUILayout.EndVertical();
            }
            
            EditorGUILayout.Space(SECTION_SPACING);
        }

        private void DrawPresetSettings()
        {
            GUILayout.BeginVertical(EditorStyles.helpBox);
            
            EditorGUILayout.LabelField("‚öôÔ∏è Configuration Presets", EditorStyles.boldLabel);
            EditorGUILayout.Space(3f);
            
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("üîß Development Config", GUILayout.Height(BUTTON_HEIGHT)))
            {
                ApplyDevelopmentConfig();
                ShowNotification(new GUIContent("Development config applied!"));
            }
            if (GUILayout.Button("üöÄ Release Config", GUILayout.Height(BUTTON_HEIGHT)))
            {
                if (EditorUtility.DisplayDialog("Apply Release Config", "This will disable debug logging. Continue?", "Apply", "Cancel"))
                {
                    LogUtility.ConfigureForRelease();
                    ShowNotification(new GUIContent("Release config applied!"));
                }
            }
            EditorGUILayout.EndHorizontal();
            
            GUILayout.EndVertical();
        }

        private void DrawFooter()
        {
            EditorGUILayout.Space(SECTION_SPACING);
            
            GUILayout.BeginVertical(EditorStyles.helpBox);
            
            GUIStyle footerStyle = new GUIStyle(EditorStyles.miniLabel)
            {
                alignment = TextAnchor.MiddleCenter,
                normal = { textColor = Color.gray }
            };
            
            EditorGUILayout.LabelField("LogUtility Settings v1.0 | Settings are applied immediately", footerStyle);
            
            GUILayout.EndVertical();
        }

        private void DrawSectionHeader(string title, ref bool isExpanded)
        {
            GUIStyle headerStyle = new GUIStyle(EditorStyles.foldout)
            {
                fontSize = 12,
                fontStyle = FontStyle.Bold
            };
            
            isExpanded = EditorGUILayout.Foldout(isExpanded, title, headerStyle);
        }
        #endregion

        #region Helper Methods
        private string GetCategoryIcon(LogCategory category)
        {
            return category switch
            {
                LogCategory.General => "üìù",
                LogCategory.System => "‚öôÔ∏è",
                LogCategory.Gameplay => "üéÆ",
                LogCategory.UI => "üñºÔ∏è",
                LogCategory.Audio => "üîä",
                LogCategory.Network => "üåê",
                LogCategory.Performance => "‚ö°",
                LogCategory.Test => "üß™",
                LogCategory.Debug => "üêõ",
                _ => "üìÑ"
            };
        }

        private bool GetCategoryEnabled(LogCategory category)
        {
            // „É™„Éï„É¨„ÇØ„Ç∑„Éß„É≥„Çí‰Ωø„Å£„Å¶CategoryEnabled„Éï„Ç£„Éº„É´„Éâ„Å´„Ç¢„ÇØ„Çª„Çπ
            var field = typeof(LogUtility).GetField("CategoryEnabled", 
                BindingFlags.NonPublic | BindingFlags.Static);
            
            if (field?.GetValue(null) is Dictionary<LogCategory, bool> dict)
            {
                return dict.GetValueOrDefault(category, true);
            }
            
            return true; // „Éá„Éï„Ç©„É´„ÉàÂÄ§
        }

        private void SendTestLog()
        {
            string message = $"{_testMessage} (Test from Editor)";
            
            switch (_testLogLevel)
            {
                case LogLevel.Verbose:
                    LogUtility.Verbose(message, _testCategory);
                    break;
                case LogLevel.Debug:
                    LogUtility.Debug(message, _testCategory);
                    break;
                case LogLevel.Info:
                    LogUtility.Info(message, _testCategory);
                    break;
                case LogLevel.Warning:
                    LogUtility.Warning(message, _testCategory);
                    break;
                case LogLevel.Error:
                    LogUtility.Error(message, _testCategory);
                    break;
                case LogLevel.Fatal:
                    LogUtility.Fatal(message, _testCategory);
                    break;
            }
            
            ShowNotification(new GUIContent($"Sent {_testLogLevel} log!"));
        }

        private void ApplyDevelopmentConfig()
        {
            LogUtility.MinLogLevel = LogLevel.Verbose;
            LogUtility.IsFileLoggingEnabled = true;
            LogUtility.IsStackTraceEnabled = true;
            LogUtility.IsPerformanceLoggingEnabled = true;
            LogUtility.SetAllCategoriesEnabled(true);
        }

        private void OpenLogFolder()
        {
            string logPath = Path.Combine(Application.persistentDataPath, "Logs");
            
            if (!Directory.Exists(logPath))
            {
                Directory.CreateDirectory(logPath);
            }
            
            EditorUtility.RevealInFinder(logPath);
        }
        #endregion
    }
}